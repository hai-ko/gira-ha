#!/usr/bin/env python3
"""Validate the restored callback system files without importing Home Assistant."""

import os
import sys

def validate_callback_restoration():
    """Validate that all callback system components have been restored."""
    
    print("üß™ VALIDATING RESTORED CALLBACK SYSTEM")
    print("=" * 60)
    
    base_path = '/Users/heikoburkhardt/repos/gira-x1-ha/custom_components/gira_x1'
    
    # Test 1: Check constants file
    print("\n1Ô∏è‚É£ Validating callback constants...")
    
    const_path = os.path.join(base_path, 'const.py')
    try:
        with open(const_path, 'r') as f:
            const_content = f.read()
        
        required_constants = [
            'FAST_UPDATE_INTERVAL_SECONDS: Final = 5',
            'CALLBACK_UPDATE_INTERVAL_SECONDS: Final = 300',
            'API_CALLBACKS_PATH: Final = "/callbacks"',
            'WEBHOOK_VALUE_CALLBACK_PATH: Final = "/api/gira_x1/callback/value"',
            'WEBHOOK_SERVICE_CALLBACK_PATH: Final = "/api/gira_x1/callback/service"',
            'CONF_CALLBACK_URL_OVERRIDE: Final = "callback_url_override"'
        ]
        
        missing_constants = []
        for constant in required_constants:
            if constant not in const_content:
                missing_constants.append(constant)
        
        if missing_constants:
            print(f"‚ùå Missing constants: {missing_constants}")
            return False
        else:
            print("‚úÖ All callback constants restored")
    except Exception as e:
        print(f"‚ùå Error reading constants: {e}")
        return False
    
    # Test 2: Check API file
    print("\n2Ô∏è‚É£ Validating API callback methods...")
    
    api_path = os.path.join(base_path, 'api.py')
    try:
        with open(api_path, 'r') as f:
            api_content = f.read()
        
        required_api_features = [
            'async def register_callbacks(',
            'async def unregister_callbacks(',
            'API_CALLBACKS_PATH',
            'üìû CALLBACK REGISTRATION',
            '‚úÖ CALLBACK REGISTRATION SUCCESS',
            '‚ùå CALLBACK REGISTRATION FAILED'
        ]
        
        missing_features = []
        for feature in required_api_features:
            if feature not in api_content:
                missing_features.append(feature)
        
        if missing_features:
            print(f"‚ùå Missing API features: {missing_features}")
            return False
        else:
            print("‚úÖ All API callback methods restored with logging")
    except Exception as e:
        print(f"‚ùå Error reading API file: {e}")
        return False
    
    # Test 3: Check webhook file
    print("\n3Ô∏è‚É£ Validating webhook handlers...")
    
    webhook_path = os.path.join(base_path, 'webhook.py')
    try:
        with open(webhook_path, 'r') as f:
            webhook_content = f.read()
        
        required_webhook_features = [
            'class GiraX1ValueCallbackView',
            'class GiraX1ServiceCallbackView',
            'üîî INCOMING VALUE CALLBACK',
            'üîî INCOMING SERVICE CALLBACK',
            '‚úÖ VALUE CALLBACK SUCCESS',
            '‚úÖ SERVICE CALLBACK SUCCESS',
            '‚ùå VALUE CALLBACK ERROR',
            '‚ùå SERVICE CALLBACK ERROR',
            'def register_webhook_handlers',
            'def unregister_webhook_handlers'
        ]
        
        missing_features = []
        for feature in required_webhook_features:
            if feature not in webhook_content:
                missing_features.append(feature)
        
        if missing_features:
            print(f"‚ùå Missing webhook features: {missing_features}")
            return False
        else:
            print("‚úÖ All webhook handlers restored with comprehensive logging")
    except Exception as e:
        print(f"‚ùå Error reading webhook file: {e}")
        return False
    
    # Test 4: Check coordinator file
    print("\n4Ô∏è‚É£ Validating coordinator callback system...")
    
    init_path = os.path.join(base_path, '__init__.py')
    try:
        with open(init_path, 'r') as f:
            init_content = f.read()
        
        required_coordinator_features = [
            'async def setup_callbacks(self)',
            'async def cleanup_callbacks(self)',
            'def _determine_callback_base_url(self)',
            'def _get_local_ip_for_gira_x1(self)',
            'self.callbacks_enabled = False',
            'self._webhook_handlers = None',
            'üîß CALLBACK SETUP',
            '‚úÖ CALLBACK SETUP SUCCESS',
            '‚ùå CALLBACK SETUP FAILED',
            'await coordinator.setup_callbacks()',
            'await coordinator.cleanup_callbacks()'
        ]
        
        missing_features = []
        for feature in required_coordinator_features:
            if feature not in init_content:
                missing_features.append(feature)
        
        if missing_features:
            print(f"‚ùå Missing coordinator features: {missing_features}")
            return False
        else:
            print("‚úÖ All coordinator callback functionality restored")
    except Exception as e:
        print(f"‚ùå Error reading coordinator file: {e}")
        return False
    
    # Test 5: Check polling mode configuration
    print("\n5Ô∏è‚É£ Validating polling mode configuration...")
    
    try:
        # Check that update intervals are properly configured
        if 'timedelta(seconds=CALLBACK_UPDATE_INTERVAL_SECONDS)' not in init_content:
            print("‚ùå Callback mode polling interval not configured")
            return False
        
        if 'timedelta(seconds=FAST_UPDATE_INTERVAL_SECONDS)' not in init_content:
            print("‚ùå Fast polling interval not configured")
            return False
        
        print("‚úÖ Polling mode configuration restored")
    except Exception as e:
        print(f"‚ùå Error validating polling configuration: {e}")
        return False
    
    # Test 6: Check logging enhancements
    print("\n6Ô∏è‚É£ Validating comprehensive logging...")
    
    try:
        emoji_patterns = [
            'üìû',  # Callback registration
            'üîî',  # Incoming callbacks
            '‚úÖ',  # Success states
            '‚ùå',  # Error states
            '‚ö†Ô∏è',  # Warning states
            'üîß',  # Setup/configuration
            'üßπ',  # Cleanup
            'üîÑ',  # Refresh/restart
            'üì±',  # UI changes
            'üèóÔ∏è',  # Project changes
            'üöÄ',  # Startup
            'üìä'   # Data/statistics
        ]
        
        emoji_found = []
        for emoji in emoji_patterns:
            if emoji in init_content or emoji in webhook_content or emoji in api_content:
                emoji_found.append(emoji)
        
        if len(emoji_found) < 8:  # Should have most emojis
            print(f"‚ö†Ô∏è Limited emoji logging found: {emoji_found}")
        else:
            print(f"‚úÖ Comprehensive emoji-based logging implemented: {emoji_found}")
    except Exception as e:
        print(f"‚ùå Error validating logging: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ CALLBACK SYSTEM RESTORATION VALIDATION COMPLETE!")
    print("\n‚úÖ All components successfully restored:")
    print("  üìã Callback constants (intervals, paths, config)")
    print("  üåê API callback methods (register/unregister)")
    print("  üéØ Webhook handlers (value/service callbacks)")
    print("  üéõÔ∏è Coordinator callback system (setup/cleanup)")
    print("  ‚ö° Hybrid polling modes (callback + fallback)")
    print("  üìä Comprehensive emoji-based logging")
    
    print("\nüîß System Configuration:")
    print("  ‚Ä¢ Real-time callbacks with 300s fallback polling")
    print("  ‚Ä¢ Fast 5s polling when callbacks fail")
    print("  ‚Ä¢ Automatic IP detection for callback URLs")
    print("  ‚Ä¢ Comprehensive error handling and recovery")
    print("  ‚Ä¢ Test callback validation during setup")
    
    return True

if __name__ == "__main__":
    success = validate_callback_restoration()
    sys.exit(0 if success else 1)
